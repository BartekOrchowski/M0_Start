
M0_Start.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000398  080003a0  000103a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000398  08000398  000103a0  2**0
                  CONTENTS
  4 .ARM          00000000  08000398  08000398  000103a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000398  080003a0  000103a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000398  08000398  00010398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800039c  0800039c  0001039c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  000103a0  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103a0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000103d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001118  00000000  00000000  00010413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000032f  00000000  00000000  0001152b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000e8  00000000  00000000  00011860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000009d  00000000  00000000  00011948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b019  00000000  00000000  000119e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000012ec  00000000  00000000  0002c9fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009e78a  00000000  00000000  0002dcea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000248  00000000  00000000  000cc474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  000cc6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08000380 	.word	0x08000380

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	08000380 	.word	0x08000380

08000218 <LED_LD2_Init>:

// 1 - On
// 0 - Off

void LED_LD2_Init(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	// LD2 on PA5
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 800021c:	4b09      	ldr	r3, [pc, #36]	; (8000244 <LED_LD2_Init+0x2c>)
 800021e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000220:	4a08      	ldr	r2, [pc, #32]	; (8000244 <LED_LD2_Init+0x2c>)
 8000222:	f043 0301 	orr.w	r3, r3, #1
 8000226:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOA->MODER &= ~(GPIO_MODER_MODE5_1);
 8000228:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000232:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000236:	6013      	str	r3, [r2, #0]
//	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT5); // After reset is ok

//	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5);

//	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5);
}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000

08000248 <LED_LD2_On>:

__attribute__((always_inline)) inline void LED_LD2_On(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
//	GPIOA->ODR |= GPIO_ODR_OD5;
	GPIOA->BSRR = GPIO_BSRR_BS5;
 800024c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000250:	2220      	movs	r2, #32
 8000252:	619a      	str	r2, [r3, #24]
}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr

0800025e <LED_LD2_Off>:

__attribute__((always_inline)) inline void LED_LD2_Off(void)
{
 800025e:	b480      	push	{r7}
 8000260:	af00      	add	r7, sp, #0
//	GPIOA->ODR &= ~(GPIO_ODR_OD5);
	GPIOA->BSRR = GPIO_BSRR_BR5;
 8000262:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000266:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800026a:	619a      	str	r2, [r3, #24]
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr

08000276 <main>:
#include "main.h"
#include "sys_clocks.h"
#include "led.h"

int main(void)
{
 8000276:	b580      	push	{r7, lr}
 8000278:	af00      	add	r7, sp, #0
	LED_LD2_Init();
 800027a:	f7ff ffcd 	bl	8000218 <LED_LD2_Init>
    /* Loop forever */
	while(1)
	{
		LED_LD2_On();
 800027e:	f7ff ffe3 	bl	8000248 <LED_LD2_On>
		Delay(500);
 8000282:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000286:	f000 f815 	bl	80002b4 <Delay>
		LED_LD2_Off();
 800028a:	f7ff ffe8 	bl	800025e <LED_LD2_Off>
		Delay(500);
 800028e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000292:	f000 f80f 	bl	80002b4 <Delay>
		LED_LD2_On();
 8000296:	e7f2      	b.n	800027e <main+0x8>

08000298 <SysTick_Handler>:
	SysTick_Config(48000000 / 1000);
}

// SYSTICK TIMER
void SysTick_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
	Tick++; // Increase system timer
 800029c:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <SysTick_Handler+0x18>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	4a03      	ldr	r2, [pc, #12]	; (80002b0 <SysTick_Handler+0x18>)
 80002a4:	6013      	str	r3, [r2, #0]
}
 80002a6:	bf00      	nop
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	2000001c 	.word	0x2000001c

080002b4 <Delay>:
	return Tick;
}

// DELAY - WARNING! Blocking
void Delay(uint32_t Delay_ms)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	uint32_t StartTime = Tick;
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <Delay+0x2c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	60fb      	str	r3, [r7, #12]

	while(Tick < (StartTime + Delay_ms))
 80002c2:	bf00      	nop
 80002c4:	68fa      	ldr	r2, [r7, #12]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	441a      	add	r2, r3
 80002ca:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <Delay+0x2c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d8f8      	bhi.n	80002c4 <Delay+0x10>
	{
		// Just wait
	}
}
 80002d2:	bf00      	nop
 80002d4:	bf00      	nop
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	2000001c 	.word	0x2000001c

080002e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e4:	480d      	ldr	r0, [pc, #52]	; (800031c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ec:	480c      	ldr	r0, [pc, #48]	; (8000320 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ee:	490d      	ldr	r1, [pc, #52]	; (8000324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <LoopForever+0xe>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f4:	e002      	b.n	80002fc <LoopCopyDataInit>

080002f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fa:	3304      	adds	r3, #4

080002fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000300:	d3f9      	bcc.n	80002f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000302:	4a0a      	ldr	r2, [pc, #40]	; (800032c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000304:	4c0a      	ldr	r4, [pc, #40]	; (8000330 <LoopForever+0x16>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000308:	e001      	b.n	800030e <LoopFillZerobss>

0800030a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800030c:	3204      	adds	r2, #4

0800030e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000310:	d3fb      	bcc.n	800030a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000312:	f000 f811 	bl	8000338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000316:	f7ff ffae 	bl	8000276 <main>

0800031a <LoopForever>:

LoopForever:
  b LoopForever
 800031a:	e7fe      	b.n	800031a <LoopForever>
  ldr   r0, =_estack
 800031c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000324:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000328:	080003a0 	.word	0x080003a0
  ldr r2, =_sbss
 800032c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000330:	20000020 	.word	0x20000020

08000334 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000334:	e7fe      	b.n	8000334 <ADC1_2_IRQHandler>
	...

08000338 <__libc_init_array>:
 8000338:	b570      	push	{r4, r5, r6, lr}
 800033a:	4d0d      	ldr	r5, [pc, #52]	; (8000370 <__libc_init_array+0x38>)
 800033c:	4c0d      	ldr	r4, [pc, #52]	; (8000374 <__libc_init_array+0x3c>)
 800033e:	1b64      	subs	r4, r4, r5
 8000340:	10a4      	asrs	r4, r4, #2
 8000342:	2600      	movs	r6, #0
 8000344:	42a6      	cmp	r6, r4
 8000346:	d109      	bne.n	800035c <__libc_init_array+0x24>
 8000348:	4d0b      	ldr	r5, [pc, #44]	; (8000378 <__libc_init_array+0x40>)
 800034a:	4c0c      	ldr	r4, [pc, #48]	; (800037c <__libc_init_array+0x44>)
 800034c:	f000 f818 	bl	8000380 <_init>
 8000350:	1b64      	subs	r4, r4, r5
 8000352:	10a4      	asrs	r4, r4, #2
 8000354:	2600      	movs	r6, #0
 8000356:	42a6      	cmp	r6, r4
 8000358:	d105      	bne.n	8000366 <__libc_init_array+0x2e>
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000360:	4798      	blx	r3
 8000362:	3601      	adds	r6, #1
 8000364:	e7ee      	b.n	8000344 <__libc_init_array+0xc>
 8000366:	f855 3b04 	ldr.w	r3, [r5], #4
 800036a:	4798      	blx	r3
 800036c:	3601      	adds	r6, #1
 800036e:	e7f2      	b.n	8000356 <__libc_init_array+0x1e>
 8000370:	08000398 	.word	0x08000398
 8000374:	08000398 	.word	0x08000398
 8000378:	08000398 	.word	0x08000398
 800037c:	0800039c 	.word	0x0800039c

08000380 <_init>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	bf00      	nop
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr

0800038c <_fini>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	bf00      	nop
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr
